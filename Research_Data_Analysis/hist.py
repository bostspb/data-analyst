"""
Будем бросать на стол 10 монет и считать количество выпавших орлов.
Функции для имитации одного броска и подсчёта числа орлов в нескольких бросках уже в прекоде.
Мы повторили эксперимент 1000 раз и сохранили результат в переменной df_experiments.
Постройте гистограмму полученных значений с диапазоном значений от 0 до 11 и количеством корзин 11.
"""

import random
import pandas as pd


# Функция, имитирующая один бросок монеты.
# От англ. coin - монета, flip - бросок монеты.
def coin_flip():
    # возможны два варианта:
    # - выпала решка, это +0 орлов
    # - выпал орёл, это +1 орёл
    score = random.randint(0, 1)
    return score


# Функция для суммирования числа орлов в нескольких бросках.
# Орёл и решка переводятся на английский как heads и tails.
# Аргумент repeat говорит, сколько раз бросать монету
# (от англ. repeat - повторение).
def flips_heads(repeat):
    total = 0
    for _ in range(repeat):
        flip = coin_flip()
        total += flip
    return total


experiments = []
for i in range(1000):
    score = flips_heads(10)
    experiments.append(score)

df_experiments = pd.DataFrame(experiments)
df_experiments.hist(bins=11, range=(0, 11))



"""
Валерик каждый день едет на работу с тремя пересадками: сперва на автобусе до метро; 
затем по одной ветке, а потом по другой; и от метро добирается до работы на автобусе. 
Валерик знает, сколько продолжается поездка на каждом виде транспорта и пересадки, но вечно забывает 
учесть ожидание автобусов и поездов. Постройте гистограмму опозданий Валерика за 5 лет c параметром bins=10.

Будем считать, что автобус прибывает за время от 0 до 10 минут, а поезд — за время от 0 до 5 минут. 
В прекоде мы уже написали функции, которые это имитируют.
"""
# Функция, имитирующая время ожидания автобуса.
# (от англ. bus - автобус, wait - ждать, time - время)
def bus_wait_time():
    return random.randint(0, 10)


# Функция, имитирующая время ожидания поезда в метро.
# (от англ. train - поезд, wait - ждать, time - время)
def train_wait_time():
    return random.randint(0, 5)


# Функция подсчёта полного опоздания за день.
# от англ. total - полный, итоговый, delay - задержка, опоздание
def total_delay():
    # обратите внимание, как в Python переносят длинные строки
    return (
        bus_wait_time()
        + train_wait_time()
        + train_wait_time()
        + bus_wait_time()
    )


days = []
for i in range(365 * 5):
    delay = total_delay()
    days.append(delay)

df_days = pd.DataFrame(days)
df_days.hist(bins=10)




